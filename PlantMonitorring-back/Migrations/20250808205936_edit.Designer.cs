// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlantMonitorring.DBContext;

#nullable disable

namespace PlantMonitorring.Migrations
{
    [DbContext(typeof(PlantDataBaseContext))]
    [Migration("20250808205936_edit")]
    partial class edit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("PlantMonitorring.Entity.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PlantingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Species")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A beautiful red rose.",
                            Image = "rose.jpg",
                            IsActive = true,
                            Location = "GreenHouseA",
                            Name = "Rose",
                            PlantingDate = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Species = "Rosa"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A vibrant yellow tulip.",
                            Image = "tulip.jpg",
                            IsActive = true,
                            Location = "GreenHouseA",
                            Name = "Tulip",
                            PlantingDate = new DateTime(2022, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Species = "Tulipa"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A hardy cactus that thrives in dry conditions.",
                            Image = "cactus.jpg",
                            IsActive = true,
                            Location = "Indoor",
                            Name = "Cactus",
                            PlantingDate = new DateTime(2022, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Species = "Cactaceae"
                        });
                });

            modelBuilder.Entity("PlantMonitorring.Entity.PlantSensorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SensorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.HasIndex("SensorId");

                    b.ToTable("PlantSensorDatas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PlantId = 1,
                            SensorId = 1,
                            Timestamp = new DateTime(2025, 5, 5, 5, 5, 9, 0, DateTimeKind.Unspecified),
                            Value = 24.0
                        },
                        new
                        {
                            Id = 2,
                            PlantId = 1,
                            SensorId = 2,
                            Timestamp = new DateTime(2025, 5, 5, 5, 5, 9, 0, DateTimeKind.Unspecified),
                            Value = 70.0
                        },
                        new
                        {
                            Id = 3,
                            PlantId = 1,
                            SensorId = 3,
                            Timestamp = new DateTime(2025, 5, 5, 5, 5, 9, 0, DateTimeKind.Unspecified),
                            Value = 50.0
                        },
                        new
                        {
                            Id = 4,
                            PlantId = 1,
                            SensorId = 4,
                            Timestamp = new DateTime(2025, 5, 5, 5, 5, 9, 0, DateTimeKind.Unspecified),
                            Value = 70.0
                        },
                        new
                        {
                            Id = 5,
                            PlantId = 2,
                            SensorId = 5,
                            Timestamp = new DateTime(2025, 5, 5, 5, 5, 9, 0, DateTimeKind.Unspecified),
                            Value = 70.0
                        });
                });

            modelBuilder.Entity("PlantMonitorring.Entity.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("Sensors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Location = "GreenHouseA",
                            PlantId = 1,
                            Type = "Temperature",
                            Unit = "Celsius"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Location = "GreenHouseA",
                            PlantId = 1,
                            Type = "Humidity",
                            Unit = "Percentage"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Location = "GreenHouseA",
                            PlantId = 1,
                            Type = "Soil Moisture",
                            Unit = "Percentage"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Location = "GreenHouseA",
                            PlantId = 1,
                            Type = "Light",
                            Unit = "Lux"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Location = "GreenHouseB",
                            PlantId = 2,
                            Type = "Temperature",
                            Unit = "Celsius"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            Location = "GreenHouseB",
                            PlantId = 2,
                            Type = "Humidity",
                            Unit = "Percentage"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            Location = "GreenHouseB",
                            PlantId = 2,
                            Type = "Soil Moisture",
                            Unit = "Percentage"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            Location = "GreenHouseB",
                            PlantId = 2,
                            Type = "Light",
                            Unit = "Lux"
                        });
                });

            modelBuilder.Entity("PlantMonitorring.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Email = "sara@yahoo.com",
                            Name = "Sara",
                            Password = "",
                            UserName = "100",
                            UserRole = "Admin"
                        },
                        new
                        {
                            Id = 101,
                            Email = "Ali@yahoo.com",
                            Name = "Ali",
                            Password = "",
                            UserName = "101",
                            UserRole = "User"
                        });
                });

            modelBuilder.Entity("PlantMonitorring.Entity.PlantSensorData", b =>
                {
                    b.HasOne("PlantMonitorring.Entity.Plant", "Plant")
                        .WithMany("PlantSensorData")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantMonitorring.Entity.Sensor", "Sensor")
                        .WithMany("PlantSensorData")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("PlantMonitorring.Entity.Sensor", b =>
                {
                    b.HasOne("PlantMonitorring.Entity.Plant", "Plant")
                        .WithMany("Sensor")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("PlantMonitorring.Entity.Plant", b =>
                {
                    b.Navigation("PlantSensorData");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("PlantMonitorring.Entity.Sensor", b =>
                {
                    b.Navigation("PlantSensorData");
                });
#pragma warning restore 612, 618
        }
    }
}
